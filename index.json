[{"content":"I have yet to work on a project where we have attempted to test the log statements in the software \u0026amp; I\u0026rsquo;ve recently found myself asking why.\nLog statements added by different developers (sometimes guided by a woolly statement on logging in the project coding guidelines) vary in their number, style \u0026amp; usefulness. Logging ends up inconsistent in its level of detail, format \u0026amp; log level.\nThe logging of the same event could end up like any of the following:\n1: Saving order... 2: Creating order for customer [123] for [5] items with value [Â£56.20]... 3: Adding order [ customer: { ... // full details of customer }, items: { ... // full details of all items }, ... ] In this environment, diagnosing the cause of production issues frequently involves tweaking the log level for certain packages in the hope that the application gives up its secrets and deploying patches with additional log statements when it doesn\u0026rsquo;t.\nIt seems clear that we do care about logging \u0026amp; it is an important part of what we deliver.\nIf we are using AOP to consistently apply logging at the boundary to certain layers and have no other logging, that\u0026rsquo;s great. Testing those log statements is probably less valuable. If not, we need a solution.\nLogCaptor LogCaptor is a simple library that allows us to capture logging from the system under test and make assertions about it. It looks like this:\nclass WidgetServiceTest { private final LogCaptor logCaptor = LogCaptor.forClass(WidgetService.class); ... @Test void testAdd() { String name = \u0026#34;My Widget\u0026#34;; service.add(Widget.of(name)); assertThat(logCaptor.getDebugLogs()) .containsExactly( String.format(\u0026#34;Adding widget with name [%s]\u0026#34;, name) ); } } (this example is also using the awesome AssertJ)\nThe LogCaptor class provides methods for getting the logged messages as a list of LogEvent or strings. For the latter, these can be restricted to a particular logging level.\nThe full LogEvent is useful for more complex assertions. It provides access to arguments and any Throwable as well as the message \u0026amp; log level. The following example shows a test of a log statement that includes an exception.\n@Test void testRemoveWithIllegalId() { int illegalId = -1; assertThatIllegalArgumentException() .isThrownBy(() -\u0026gt; service.remove(illegalId)); List\u0026lt;LogEvent\u0026gt; logEvents = logCaptor.getLogEvents(); assertThat(logEvents) .hasOnlyOneElementSatisfying( event -\u0026gt; { assertThat(event.getMessage()) .isEqualTo(\u0026#34;Error removing widget\u0026#34;); assertThat(event.getLevel()) .isEqualTo(\u0026#34;ERROR\u0026#34;); assertThat(event.getThrowable()) .isPresent() .get(as(InstanceOfAssertFactories.THROWABLE)) .hasMessage( String.format( \u0026#34;Widget id must be greater than 0 but was [%s]\u0026#34;, illegalId ) ) .isInstanceOf(IllegalArgumentException.class); } ); } It works with all common logging libraries and with the Lombok logging annotations.\nThat\u0026rsquo;s LogCaptor.\nlogcaptor.\nassertj.\nsource.\n","permalink":"https://www.codecrumbs.dev/posts/testing-logging/","summary":"I have yet to work on a project where we have attempted to test the log statements in the software \u0026amp; I\u0026rsquo;ve recently found myself asking why.\nLog statements added by different developers (sometimes guided by a woolly statement on logging in the project coding guidelines) vary in their number, style \u0026amp; usefulness. Logging ends up inconsistent in its level of detail, format \u0026amp; log level.\nThe logging of the same event could end up like any of the following:","title":"test your logging"},{"content":"This is my blog, codecrumbs. I\u0026rsquo;m a software developer specialising in Java with a particular interest in developer testing. I started blogging mainly to help me clarify my own thoughts and perhaps remember them beyond the end of the week.\nIn the unlikely event that it benefits someone else, that\u0026rsquo;s great.\n","permalink":"https://www.codecrumbs.dev/about/","summary":"This is my blog, codecrumbs. I\u0026rsquo;m a software developer specialising in Java with a particular interest in developer testing. I started blogging mainly to help me clarify my own thoughts and perhaps remember them beyond the end of the week.\nIn the unlikely event that it benefits someone else, that\u0026rsquo;s great.","title":"about"},{"content":"","permalink":"https://www.codecrumbs.dev/search/","summary":"search","title":"search"}]